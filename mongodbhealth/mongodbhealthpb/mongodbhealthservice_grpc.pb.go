// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mongodbhealthpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MongoDbHealthServiceClient is the client API for MongoDbHealthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MongoDbHealthServiceClient interface {
	// https://developers.google.com/protocol-buffers/docs/proto3#any
	// https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Empty
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
}

type mongoDbHealthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMongoDbHealthServiceClient(cc grpc.ClientConnInterface) MongoDbHealthServiceClient {
	return &mongoDbHealthServiceClient{cc}
}

func (c *mongoDbHealthServiceClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/mongodbhealthpb.MongoDbHealthService/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MongoDbHealthServiceServer is the server API for MongoDbHealthService service.
// All implementations must embed UnimplementedMongoDbHealthServiceServer
// for forward compatibility
type MongoDbHealthServiceServer interface {
	// https://developers.google.com/protocol-buffers/docs/proto3#any
	// https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Empty
	Health(context.Context, *emptypb.Empty) (*HealthResponse, error)
	mustEmbedUnimplementedMongoDbHealthServiceServer()
}

// UnimplementedMongoDbHealthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMongoDbHealthServiceServer struct {
}

func (UnimplementedMongoDbHealthServiceServer) Health(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedMongoDbHealthServiceServer) mustEmbedUnimplementedMongoDbHealthServiceServer() {}

// UnsafeMongoDbHealthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MongoDbHealthServiceServer will
// result in compilation errors.
type UnsafeMongoDbHealthServiceServer interface {
	mustEmbedUnimplementedMongoDbHealthServiceServer()
}

func RegisterMongoDbHealthServiceServer(s grpc.ServiceRegistrar, srv MongoDbHealthServiceServer) {
	s.RegisterService(&MongoDbHealthService_ServiceDesc, srv)
}

func _MongoDbHealthService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MongoDbHealthServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mongodbhealthpb.MongoDbHealthService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MongoDbHealthServiceServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MongoDbHealthService_ServiceDesc is the grpc.ServiceDesc for MongoDbHealthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MongoDbHealthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mongodbhealthpb.MongoDbHealthService",
	HandlerType: (*MongoDbHealthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _MongoDbHealthService_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mongodbhealth/mongodbhealthpb/mongodbhealthservice.proto",
}
