// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package userauthnpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UserAuthnServiceClient is the client API for UserAuthnService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAuthnServiceClient interface {
	CreateToken(ctx context.Context, in *CreateTokenRequest, opts ...grpc.CallOption) (*CreateTokenResponse, error)
}

type userAuthnServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAuthnServiceClient(cc grpc.ClientConnInterface) UserAuthnServiceClient {
	return &userAuthnServiceClient{cc}
}

func (c *userAuthnServiceClient) CreateToken(ctx context.Context, in *CreateTokenRequest, opts ...grpc.CallOption) (*CreateTokenResponse, error) {
	out := new(CreateTokenResponse)
	err := c.cc.Invoke(ctx, "/userauthnpb.UserAuthnService/CreateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAuthnServiceServer is the server API for UserAuthnService service.
// All implementations must embed UnimplementedUserAuthnServiceServer
// for forward compatibility
type UserAuthnServiceServer interface {
	CreateToken(context.Context, *CreateTokenRequest) (*CreateTokenResponse, error)
	mustEmbedUnimplementedUserAuthnServiceServer()
}

// UnimplementedUserAuthnServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserAuthnServiceServer struct {
}

func (UnimplementedUserAuthnServiceServer) CreateToken(context.Context, *CreateTokenRequest) (*CreateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (UnimplementedUserAuthnServiceServer) mustEmbedUnimplementedUserAuthnServiceServer() {}

// UnsafeUserAuthnServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAuthnServiceServer will
// result in compilation errors.
type UnsafeUserAuthnServiceServer interface {
	mustEmbedUnimplementedUserAuthnServiceServer()
}

func RegisterUserAuthnServiceServer(s grpc.ServiceRegistrar, srv UserAuthnServiceServer) {
	s.RegisterService(&_UserAuthnService_serviceDesc, srv)
}

func _UserAuthnService_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthnServiceServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userauthnpb.UserAuthnService/CreateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthnServiceServer).CreateToken(ctx, req.(*CreateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserAuthnService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "userauthnpb.UserAuthnService",
	HandlerType: (*UserAuthnServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateToken",
			Handler:    _UserAuthnService_CreateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userauthn/userauthnpb/userauthnservice.proto",
}
